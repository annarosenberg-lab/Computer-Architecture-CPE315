		;		Variables assigned to Registers
		;		i = 0               R1
		;		array1[i] = 0x500   R2
		;		arrayLen = 25       R3
		;		maxNum = 6          R4
		;		curNum = 1          R5
		;		array2[i] = 0x600   R6
		;		array3 = 0x700
		
		;		clear registers
		AND		R0, R0, #0
		AND		R1, R1, #0
		AND		R2, R2, #0
		AND		R3, R3, #0
		AND		R4, R4, #0
		AND		R5, R5, #0
		AND		R6, R6, #0
		
		;		load registers
		ADD		R2, R2, #0x500
		ADD		R3, R3, #25
		ADD		R4, R4, #6
		ADD		R5, R5, #1
		
		;		initialize array1 starting at 0x110
LOOP1	CMP		R1, R3
		BEQ		EXIT1
		CMP		R4, R5		; Compare R4 and R5
		SUBEQ	R5, R5, #5 	; If curNum == maxNum, then subtract by 5. Returning curNum to 1
		STR		R5, [R2, #0]	; Store curNum into array
		CMP		R4, R5		; Compare R4 and R5
		ADDNE	R5, R5, #1	; If curNum != maxNum, then add 1 to curNum
		ADD		R1, R1, #1	; Add 1 to i
		ADD		R2, R2, #4	; Add 4 to array pointer
		B		LOOP1		; Go back to LOOP
		
EXIT1
		
		;		clear registers
		AND		R1, R1, #0
		AND		R3, R3, #0
		AND		R4, R4, #0
		AND		R5, R5, #0
		AND		R6, R6, #0
		
		ADD		R3, R3, #25
		ADD		R4, R4, #0
		ADD		R5, R5, #5
		ADD		R6, R6, #0x600
		
		;		initialize array2 starting at 0x110
LOOP2	CMP		R1, R3
		BEQ		EXIT2
		CMP		R4, R5		; Compare R4 and R5
		ADDEQ	R5, R5, #5 	; If curNum == maxNum, then subtract by 5. Returning curNum to 1
		STR		R5, [R6, #0]	; Store curNum into array
		CMP		R4, R5		; Compare R4 and R5
		SUBNE	R5, R5, #1	; If curNum != maxNum, then add 1 to curNum
		ADD		R1, R1, #1	; Add 1 to i
		ADD		R6, R6, #4	; Add 4 to array pointer
		B		LOOP2		; Go back to LOOP
		
EXIT2
		
		;		clear all registers
		AND		R0, R0, #0
		AND		R1, R1, #0
		AND		R2, R2, #0
		AND		R3, R3, #0
		AND		R4, R4, #0
		AND		R5, R5, #0
		AND		R6, R6, #0
		AND		R7, R7, #0
		AND		R8, R8, #0
		AND		R9, R9, #0
		AND		R10, R10, #0
		AND		R11, R11, #0
		AND		R12, R12, #0
		
		;		loading registers with needed info
		;		R0 == sum
		;		R1 == i
		;		R2 == j
		;		R3 == k
		;		R4 == z
		;		R5 == i*5
		;		R6 == k*5
		;		R7 == array1
		;		R8 == array2
		;		R9 == array3
		;		R10 == UNUSED
		;		R11 == UNUSED
		;		R12 == UNUSED
		
LOOPM1	CMP		R1, #5
		BEQ		QUIT
		
LOOPM2	CMP		R2, #5
		ANDEQ	R2, R2, #0
		ADDEQ	R5, R5, #5
		ADDEQ	R1, R1, #1
		BEQ		LOOPM1
		
LOOPM3	CMP		R3, #5
		ANDEQ	R3, R3, #0
		ADDEQ	R6, R6, #5
		BEQ		CONT2
		
		;		get array1[i][k]
		AND		R7, R7, #0
		ADD		R7, R7, #0x500
		ADD		R7, R7, R5, LSL #2
		ADD		R7, R7, R3, LSL #2
		LDR		R7, [R7, #0]
		
		;		get array2[k][j]
		AND		R8, R8, #0
		ADD		R8, R8, #0x600
		ADD		R8, R8, R6, LSL #2
		ADD		R8, R8, R2, LSL #2
		LDR		R8, [R8, #0]
		
		;		loop to multiply array1[i][k] by array2[j][k]
		AND		R4, R4, #0
MULT		CMP		R4, R8
		BEQ		CONT
		ADD		R0, R0, R7
		ADD		R4, R4, #1
		B		MULT
		
CONT		ADD		R3, R3, #1
		AND		R6, R6, #0
		B		LOOPM3
		
CONT2	;		get array3[i][j]
		AND		R9, R9, #0
		ADD		R9, R9, #0x700
		ADD		R9, R9, R5, LSL #2
		ADD		R9, R9, R2, LSL #2
		STR		R0, [R9, #0]
		
		AND		R0, R0, #0
		
		ADD		R2, R2, #1
		B		LOOPM2
		
		
QUIT
		ADD		R0, R0, #0x700
